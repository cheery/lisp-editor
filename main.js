// Generated by CoffeeScript 1.6.3
(function() {
  var addFrame, buildStyle, condStyle, defaultStyle, drawSelection, labelStyle;

  defaultStyle = {
    fontName: "sans-serif",
    fontSize: 16,
    topPadding: 0,
    leftPadding: 0,
    rightPadding: 0,
    bottomPadding: 0,
    spacing: 5,
    indent: 10,
    verticalSpacing: 0,
    color: "black",
    selection: "blue"
  };

  buildStyle = function(parent, style) {
    var name, value;
    for (name in parent) {
      value = parent[name];
      if (style[name] == null) {
        style[name] = value;
      }
    }
    return style;
  };

  labelStyle = buildStyle(defaultStyle, {
    color: "purple",
    fontSize: 12
  });

  condStyle = buildStyle(defaultStyle, {
    indent: 0,
    selection: "yellow"
  });

  addFrame = function(container, node) {
    var first, frame, item, row, subitem, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref2, _ref3, _ref4;
    if (isMark(node, 'cr')) {
      return container.newline(node);
    }
    if (isList(node, 'cond')) {
      container.push(frame = newFrame(node, condStyle));
      first = true;
      _ref = node.list;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (!first) {
          frame.newline();
        }
        if (isList(item, 'else')) {
          row = newFrame(item, defaultStyle);
          row.push(newDeco("else", labelStyle));
          _ref1 = item.list;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            subitem = _ref1[_j];
            addFrame(row, subitem);
          }
        } else {
          row = newFrame(item, defaultStyle);
          if (!first) {
            row.push(newDeco("else", labelStyle));
          }
          row.push(newDeco("if", labelStyle));
          _ref2 = item.list;
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            subitem = _ref2[_k];
            addFrame(row, subitem);
          }
        }
        frame.push(row);
        first = false;
      }
    } else if (isList(node, 'infix')) {
      container.push(frame = newFrame(node, buildStyle(defaultStyle, {
        selection: "green"
      })));
      _ref3 = node.list;
      for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
        item = _ref3[_l];
        addFrame(frame, item);
      }
    } else if (isList(node)) {
      container.push(frame = newFrame(node, buildStyle(defaultStyle, {
        selection: "blue"
      })));
      if (node.label != null) {
        frame.push(newDeco(node.label, labelStyle));
      }
      _ref4 = node.list;
      for (_m = 0, _len4 = _ref4.length; _m < _len4; _m++) {
        item = _ref4[_m];
        addFrame(frame, item);
      }
    } else if (isText(node, 'int')) {
      container.push(frame = newFrame(node, buildStyle(container.style, {
        color: "blue"
      })));
    } else {
      container.push(frame = newFrame(node, container.style));
    }
    return null;
  };

  window.addEventListener('load', function() {
    var bc, canvas, cursor, draw, first, frame, mouse, node, root, _i, _len, _ref;
    canvas = autoResize(document.getElementById('editor'));
    bc = canvas.getContext('2d');
    mouse = mouseInput(canvas);
    root = newList([newList([newList([newText("square"), newText("x")]), newMark('cr'), newList([newText("x"), newText("*"), newText("x")], 'infix')], 'define'), newList([newList([newText("factorial"), newText("n")]), newMark('cr'), newList([newList([newList([newText("n"), newText("="), newText("1", "int")], 'infix'), newMark("cr"), newText("1", "int")]), newList([newList([newText("n"), newText("="), newText("0", "int")], 'infix'), newMark("cr"), newText("1", "int")]), newList([newMark("cr"), newList([newText("n"), newText("*"), newList([newText("factorial"), newList([newText("n"), newText("-"), newText("1", "int")], 'infix')])], 'infix')], 'else')], 'cond')], 'define')]);
    cursor = {
      index: 0,
      node: root
    };
    frame = newFrame(root, buildStyle(defaultStyle, {
      indent: 0,
      verticalSpacing: 25
    }));
    first = true;
    _ref = frame.node.list;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      node = _ref[_i];
      if (!first) {
        frame.newline();
      }
      addFrame(frame, node);
      first = false;
    }
    canvas.addEventListener('click', function(ev) {
      var near;
      ev.preventDefault();
      if ((near = frame.nearest.apply(frame, mouse.point)) != null) {
        return cursor = {
          index: near.index,
          node: near.frame.node
        };
      }
    });
    keyboardEvents(canvas, function(keyCode, text) {
      var code;
      code = text === "" ? keyCode : text;
      return console.log(code);
    });
    draw = function() {
      var cframe, jk, near;
      bc.fillStyle = "#ccc";
      bc.fillRect(0, 0, canvas.width, canvas.height);
      frame.layout(bc);
      frame.x = 50;
      frame.y = 50;
      frame.paint(bc);
      if ((near = frame.nearest.apply(frame, mouse.point)) != null) {
        drawSelection(bc, near.frame, near.index, near.index, "black");
      }
      if (cursor != null) {
        cframe = frame.find(cursor.node);
        if (cframe != null) {
          drawSelection(bc, cframe, cursor.index, cursor.index, "blue");
        }
      }
      bc.font = "12px sans-serif";
      bc.fillStyle = 'black';
      bc.fillRect(0, 0, canvas.width, 16);
      bc.fillStyle = 'white';
      bc.fillText(" index [] ", 0, 11);
      jk = frame.y + frame.height + 12;
      bc.fillStyle = 'black';
      bc.fillText(" I already published the layout upgrade", 0, jk);
      bc.fillText(" But the input processing requires bit more work.", 0, jk + 12);
      bc.fillText(" Please have patience with me. The editor won't recognise input for few days.", 0, jk + 24);
      bc.fillRect(0, canvas.height - 16, canvas.width, 16);
      bc.fillStyle = 'white';
      bc.fillText(" -- select --", 0, canvas.height - 5);
      return requestAnimationFrame(draw);
    };
    return draw();
  });

  drawSelection = function(bc, frame, start, stop, style) {
    var parent, x, y, _ref;
    bc.globalAlpha = 0.1;
    parent = frame.parent;
    while (parent != null) {
      bc.strokeStyle = parent.style.selection;
      _ref = parent.getPosition(), x = _ref.x, y = _ref.y;
      bc.strokeRect(x, y, parent.width, parent.height);
      parent = parent.parent;
    }
    bc.globalAlpha = 0.5;
    bc.strokeStyle = style;
    bc.fillStyle = style;
    frame.paintSelection(bc, start, stop);
    return bc.globalAlpha = 1.0;
  };

}).call(this);
