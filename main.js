// Generated by CoffeeScript 1.6.3
(function() {
  var Selection, leftSelection, rightSelection, textleft, textright, travelLeft, travelRight;

  window.addEventListener('load', function() {
    var bc, canvas, draw, drawBox, mode, model, mouse, over, selectMode, selection;
    canvas = autoResize(document.getElementById('editor'));
    bc = canvas.getContext('2d');
    model = list(text("define"), list(text("factorial"), text("n")), cr(), list(text("if"), list(text("="), text("n"), text("0")), text("1"), cr(), list(text("*"), text("n"), list(text("factorial"), list(text("-"), text("n"), text("1"))))));
    mouse = mouseInput(canvas);
    window.model = model;
    over = null;
    selection = textright(leftSelection(model));
    selection.mark();
    selectMode = function(keyCode, text) {
      selection.unmark();
      if (text === 'l') {
        if (selection.head < selection.target.length && selection.target.type === 'text') {
          selection.update(selection.head + 1, selection.head + 1);
        } else {
          selection = textright(travelRight(selection));
        }
      }
      if (text === 'w') {
        selection = textright(travelRight(selection));
      }
      if (text === 'e') {
        if (selection.target.type !== 'text' || selection.head === selection.target.length) {
          selection = textright(travelRight(selection));
        }
        if (selection.target.type === 'text') {
          selection.update(selection.target.length, selection.target.length);
        }
      }
      if (text === 'h') {
        if (0 < selection.head && selection.target.type === 'text') {
          selection.update(selection.head - 1, selection.head - 1);
        } else {
          selection = textleft(travelLeft(selection));
        }
      }
      if (text === 'b') {
        if (selection.target.type !== 'text' || selection.head === 0) {
          selection = textleft(travelLeft(selection));
        }
        if (selection.target.type === 'text') {
          selection.update(0, 0);
        }
      }
      return selection.mark();
    };
    mode = selectMode;
    keyboardEvents(canvas, function(keyCode, text) {
      return mode(keyCode, text);
    });
    draw = function() {
      bc.fillStyle = "#aaa";
      bc.fillRect(0, 0, canvas.width, canvas.height);
      bc.textBaseline = "middle";
      model.layout(bc);
      model.x = 50;
      model.y = 50;
      over = model.mousemotion.apply(model, mouse.point);
      model.draw(bc);
      bc.fillText("press (h,l,w,e,b) -keys to try basic motions", 50, 10);
      return requestAnimationFrame(draw);
    };
    drawBox = function(x, y, w, h) {
      bc.beginPath();
      bc.rect(x, y, w, h);
      bc.fill();
      return bc.stroke();
    };
    return draw();
  });

  Selection = (function() {
    function Selection(target, head, tail) {
      this.target = target;
      this.head = head;
      this.tail = tail;
      this.update(this.head, this.tail);
    }

    Selection.prototype.update = function(head, tail) {
      this.head = head;
      this.tail = tail;
      this.start = Math.min(this.head, this.tail);
      return this.stop = Math.max(this.head, this.tail);
    };

    Selection.prototype.mark = function() {
      return this.target.selection = this;
    };

    Selection.prototype.unmark = function() {
      return this.target.selection = null;
    };

    return Selection;

  })();

  leftSelection = function(target) {
    return new Selection(target, 0, 0);
  };

  rightSelection = function(target) {
    return new Selection(target, target.length, target.length);
  };

  textleft = function(selection) {
    var node, start, stop, target;
    target = selection.target, start = selection.start, stop = selection.stop;
    if (target.type !== 'text' && 0 < start) {
      node = target.list[start - 1];
      if (node.type === 'text') {
        return new Selection(node, node.length, node.length);
      }
    }
    return selection;
  };

  textright = function(selection) {
    var node, start, stop, target;
    target = selection.target, start = selection.start, stop = selection.stop;
    if (target.type !== 'text' && stop < target.length) {
      node = target.list[stop];
      if (node.type === 'text') {
        return new Selection(node, 0, 0);
      }
    }
    return selection;
  };

  travelLeft = function(selection) {
    var head, node, start, target, _ref, _ref1;
    target = selection.target, head = selection.head;
    if (target.type === 'text') {
      _ref = target.getRange(), start = _ref.start, target = _ref.target;
      return travelLeft(new Selection(target, start, start));
    }
    if (target.type === 'list') {
      if (0 < head) {
        node = target.list[head - 1];
        if (node.type === 'list' || node.type === 'text') {
          return rightSelection(node);
        }
        return new Selection(target, head - 1, head - 1);
      } else if (target.parent != null) {
        _ref1 = target.getRange(), start = _ref1.start, target = _ref1.target;
        return new Selection(target, start, start);
      }
    }
    return selection;
  };

  travelRight = function(selection) {
    var head, node, stop, target, _ref, _ref1;
    target = selection.target, head = selection.head;
    if (target.type === 'text') {
      _ref = target.getRange(), stop = _ref.stop, target = _ref.target;
      return travelRight(new Selection(target, stop, stop));
    }
    if (target.type === 'list') {
      if (head < target.length) {
        node = target.list[head];
        if (node.type === 'list' || node.type === 'text') {
          return leftSelection(node);
        }
        return new Selection(target, head + 1, head + 1);
      } else if (target.parent != null) {
        _ref1 = target.getRange(), stop = _ref1.stop, target = _ref1.target;
        return new Selection(target, stop, stop);
      }
    }
    return selection;
  };

}).call(this);
