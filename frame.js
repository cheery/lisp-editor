// Generated by CoffeeScript 1.6.3
(function() {
  var DecoFrame, ListFrame, MarkFrame, TextFrame, caretPush, clamp, paintBackground, setFont;

  ListFrame = (function() {
    function ListFrame(node, style) {
      this.node = node;
      this.style = style;
      this.frames = [];
      this.rows = [
        {
          frames: []
        }
      ];
      this.parent = null;
    }

    ListFrame.prototype.clean = function() {
      this.frames = [];
      return this.rows = [
        {
          frames: []
        }
      ];
    };

    ListFrame.prototype.push = function(frame) {
      this.frames.push(frame);
      this.rows[this.rows.length - 1].frames.push(frame);
      return frame.parent = this;
    };

    ListFrame.prototype.newline = function(breaker) {
      this.rows[this.rows.length - 1].rbreaker = breaker;
      return this.rows.push({
        frames: [],
        breaker: breaker
      });
    };

    ListFrame.prototype.layout = function(bc) {
      var caretIndex, frame, i, indent, lastrow, row, spacing, verticalSpacing, xoffset, yoffset, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3;
      this.x = 0;
      this.y = 0;
      this.width = 5;
      this.height = 5;
      caretIndex = 0;
      yoffset = this.style.topPadding;
      verticalSpacing = 0;
      indent = 0;
      _ref = this.rows;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        row = _ref[_i];
        yoffset += verticalSpacing;
        xoffset = this.style.leftPadding + indent;
        if ((i = this.node.indexOf(row.breaker)) >= 0) {
          caretIndex = i + 1;
        }
        row.carets = [];
        row.offset = yoffset;
        row.height = this.style.fontSize;
        caretPush(row, caretIndex, this.style.leftPadding);
        spacing = 0;
        _ref1 = row.frames;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          frame = _ref1[_j];
          xoffset += spacing;
          frame.layout(bc);
          if ((i = this.node.indexOf(frame.node)) >= 0) {
            caretIndex = i + 1;
            if (caretIndex >= 0) {
              caretPush(row, caretIndex - 1, xoffset);
              caretPush(row, caretIndex, xoffset + frame.width - 1);
            }
          }
          frame.x = xoffset;
          xoffset += frame.width;
          spacing = this.style.spacing;
          row.height = Math.max(row.height, frame.height);
        }
        _ref2 = row.frames;
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          frame = _ref2[_k];
          frame.y = yoffset + row.height / 2 - frame.height / 2;
        }
        this.width = Math.max(xoffset + this.style.rightPadding, this.width);
        yoffset += row.height;
        verticalSpacing = this.style.verticalSpacing;
        indent = this.style.indent;
      }
      this.height = yoffset + this.style.bottomPadding;
      _ref3 = this.rows;
      for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
        row = _ref3[_l];
        if ((i = this.node.indexOf(row.rbreaker)) >= 0) {
          caretPush(row, i, this.width - this.style.rightPadding - 1);
        }
      }
      lastrow = this.rows[this.rows.length - 1];
      caretPush(lastrow, this.node.length, this.width - this.style.rightPadding - 1);
      return null;
    };

    ListFrame.prototype.paint = function(bc) {
      var frame, _i, _len, _ref;
      paintBackground(bc, this);
      bc.save();
      bc.translate(this.x, this.y);
      _ref = this.frames;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        frame = _ref[_i];
        frame.paint(bc);
      }
      return bc.restore();
    };

    ListFrame.prototype.getPosition = function() {
      var x, y, _ref;
      x = y = 0;
      if (this.parent != null) {
        _ref = this.parent.getPosition(), x = _ref.x, y = _ref.y;
      }
      return {
        x: x + this.x,
        y: y + this.y
      };
    };

    ListFrame.prototype.pick = function(x, y) {
      var frame, result, _i, _len, _ref;
      _ref = this.frames;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        frame = _ref[_i];
        result = frame.pick(x - this.x, y - this.y);
        if (result != null) {
          return result;
        }
      }
      if ((this.x <= x && x < this.x + this.width) && (this.y <= y && y < this.y + this.height)) {
        return this;
      }
      return null;
    };

    ListFrame.prototype.nearest = function(x, y) {
      var best, caret, dx, dy, frame, kx, result, row, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
      best = {
        dist: Infinity,
        frame: null
      };
      kx = x - clamp(x, this.x, this.x + this.width);
      _ref = this.rows;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        row = _ref[_i];
        dy = y - clamp(y, this.y + row.offset, this.y + row.offset + row.height);
        _ref1 = row.carets;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          caret = _ref1[_j];
          dx = x - clamp(x, caret.left + this.x, caret.right + this.x);
          if (dx * dx + dy * dy < best.dist) {
            best.dist = dx * dx + dy * dy;
            best.index = caret.index;
            best.frame = this;
          }
        }
      }
      _ref2 = this.frames;
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        frame = _ref2[_k];
        result = frame.nearest(x - this.x, y - this.y);
        if (result.dist < best.dist) {
          best = result;
        }
      }
      return best;
    };

    ListFrame.prototype.paintSelection = function(bc, start, stop) {
      var caret, first, last, row, ry, x, y, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3, _results;
      _ref = this.getPosition(), x = _ref.x, y = _ref.y;
      _ref1 = this.rows;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        row = _ref1[_i];
        ry = y + row.offset;
        if (start === stop) {
          _results.push((function() {
            var _j, _len1, _ref2, _results1;
            _ref2 = row.carets;
            _results1 = [];
            for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
              caret = _ref2[_j];
              if (caret.index === start) {
                _results1.push(bc.fillRect(caret.left + x, ry, caret.right - caret.left, row.height));
              } else {
                _results1.push(void 0);
              }
            }
            return _results1;
          })());
        } else {
          first = null;
          last = null;
          _ref2 = row.carets;
          for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
            caret = _ref2[_j];
            if ((start <= (_ref3 = caret.index) && _ref3 <= stop)) {
              if (first == null) {
                first = caret;
              }
              last = caret;
            }
          }
          if (last != null) {
            _results.push(bc.fillRect(first.right + x, ry, last.left - first.right, row.height));
          } else {
            _results.push(void 0);
          }
        }
      }
      return _results;
    };

    ListFrame.prototype.find = function(node) {
      var frame, result, _i, _len, _ref;
      if (node === this.node) {
        return this;
      }
      _ref = this.frames;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        frame = _ref[_i];
        result = frame.find(node);
        if (result != null) {
          return result;
        }
      }
      return null;
    };

    return ListFrame;

  })();

  caretPush = function(row, index, x) {
    var carets, lc;
    carets = row.carets;
    lc = carets[carets.length - 1];
    if (carets.length === 0) {
      carets.push({
        index: index,
        left: x,
        right: x + 1
      });
    } else if (lc.index === index) {
      lc.left = Math.min(lc.left, x);
      lc.right = Math.max(lc.right, x + 1);
    } else {
      carets.push({
        index: index,
        left: x,
        right: x + 1
      });
    }
    return null;
  };

  TextFrame = (function() {
    function TextFrame(node, style) {
      this.node = node;
      this.style = style;
      this.parent = null;
    }

    TextFrame.prototype.layout = function(bc) {
      var i, _i, _ref, _results;
      this.x = 0;
      this.y = 0;
      setFont(bc, this.style);
      this.text = this.node.text;
      this.width = bc.measureText(this.text).width;
      this.height = this.style.fontSize;
      this.offsets = [0];
      _results = [];
      for (i = _i = 1, _ref = this.text.length; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        _results.push(this.offsets.push(bc.measureText(this.text.slice(0, i)).width));
      }
      return _results;
    };

    TextFrame.prototype.paint = function(bc) {
      paintBackground(bc, this);
      bc.textBaseline = "middle";
      setFont(bc, this.style);
      bc.fillStyle = this.style.color;
      return bc.fillText(this.text, this.x, this.y + this.height / 2, this.width);
    };

    TextFrame.prototype.getPosition = function() {
      var x, y, _ref;
      x = y = 0;
      if (this.parent != null) {
        _ref = this.parent.getPosition(), x = _ref.x, y = _ref.y;
      }
      return {
        x: x + this.x,
        y: y + this.y
      };
    };

    TextFrame.prototype.pick = function(x, y) {
      return null;
    };

    TextFrame.prototype.nearest = function(x, y) {
      var d, dist, dx, dy, index, k, offset, _i, _len, _ref;
      dist = Infinity;
      index = 0;
      k = 0;
      _ref = this.offsets;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        offset = _ref[_i];
        d = x - offset - this.x;
        if (d * d < dist) {
          index = k;
          dist = d * d;
        }
        k += 1;
      }
      dx = x - clamp(x, this.x, this.x + this.width);
      dy = y - clamp(y, this.y, this.y + this.height);
      return {
        dist: dx * dx + dy * dy,
        frame: this,
        index: index
      };
    };

    TextFrame.prototype.paintSelection = function(bc, start, stop) {
      var left, right, x, y, _ref;
      _ref = this.getPosition(), x = _ref.x, y = _ref.y;
      left = this.offsets[start] - 1;
      right = this.offsets[stop] + 1;
      return bc.fillRect(x + left, y, right - left, this.height);
    };

    TextFrame.prototype.find = function(node) {
      if (node === this.node) {
        return this;
      }
      return null;
    };

    return TextFrame;

  })();

  clamp = function(x, low, high) {
    return Math.max(low, Math.min(high, x));
  };

  MarkFrame = (function() {
    function MarkFrame(node, style) {
      this.node = node;
      this.style = style;
      this.parent = null;
    }

    MarkFrame.prototype.layout = function(bc) {
      this.x = 0;
      this.y = 0;
      setFont(bc, this.style);
      this.text = this.node.label;
      this.width = bc.measureText(this.text).width;
      return this.height = this.style.fontSize;
    };

    MarkFrame.prototype.paint = function(bc) {
      paintBackground(bc, this);
      bc.textBaseline = "middle";
      setFont(bc, this.style);
      bc.fillStyle = this.style.color;
      return bc.fillText(this.text, this.x, this.y + this.height / 2, this.width);
    };

    MarkFrame.prototype.getPosition = function() {
      var x, y, _ref;
      x = y = 0;
      if (this.parent != null) {
        _ref = this.parent.getPosition(), x = _ref.x, y = _ref.y;
      }
      return {
        x: x + this.x,
        y: y + this.y
      };
    };

    MarkFrame.prototype.pick = function(x, y) {
      if ((this.x <= x && x < this.x + this.width) && (this.y <= y && y < this.y + this.height)) {
        return this;
      }
      return null;
    };

    MarkFrame.prototype.nearest = function(x, y) {
      return {
        dist: Infinity,
        frame: null
      };
    };

    MarkFrame.prototype.find = function(node) {
      if (node === this.node) {
        return this;
      }
      return null;
    };

    return MarkFrame;

  })();

  DecoFrame = (function() {
    function DecoFrame(text, style) {
      this.text = text;
      this.style = style;
      this.parent = null;
    }

    DecoFrame.prototype.layout = function(bc) {
      this.x = 0;
      this.y = 0;
      setFont(bc, this.style);
      this.width = bc.measureText(this.text).width;
      return this.height = this.style.fontSize;
    };

    DecoFrame.prototype.paint = function(bc) {
      paintBackground(bc, this);
      bc.textBaseline = "middle";
      setFont(bc, this.style);
      bc.fillStyle = this.style.color;
      return bc.fillText(this.text, this.x, this.y + this.height / 2, this.width);
    };

    DecoFrame.prototype.getPosition = function() {
      var x, y, _ref;
      x = y = 0;
      if (this.parent != null) {
        _ref = this.parent.getPosition(), x = _ref.x, y = _ref.y;
      }
      return {
        x: x + this.x,
        y: y + this.y
      };
    };

    DecoFrame.prototype.pick = function(x, y) {
      return null;
    };

    DecoFrame.prototype.nearest = function(x, y) {
      return {
        dist: Infinity,
        frame: null
      };
    };

    DecoFrame.prototype.find = function(node) {
      return null;
    };

    return DecoFrame;

  })();

  paintBackground = function(bc, frame) {
    if (frame.style.background != null) {
      bc.fillStyle = frame.style.background;
      bc.fillRect(frame.x, frame.y, frame.width, frame.height);
    }
    if (frame.style.border != null) {
      bc.strokeStyle = frame.style.border;
      return bc.strokeRect(frame.x, frame.y, frame.width, frame.height);
    }
  };

  setFont = function(bc, style) {
    return bc.font = "" + style.fontSize + "px " + style.fontName;
  };

  window.newFrame = function(node, style) {
    if (isMark(node)) {
      return new MarkFrame(node, style);
    }
    if (isText(node)) {
      return new TextFrame(node, style);
    }
    if (isList(node)) {
      return new ListFrame(node, style);
    }
    throw "cannot frame " + node;
  };

  window.newDeco = function(text, style) {
    return new DecoFrame(text, style);
  };

}).call(this);
