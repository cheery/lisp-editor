// Generated by CoffeeScript 1.6.3
(function() {
  var Scope, compileExpr, compileList, genSym, isMacro, lastTmp, slot, slots,
    __slice = [].slice;

  window.Environment = {
    "print": function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return console.log.apply(console, args);
    }
  };

  window.evaluateDocument = function(doc) {
    var scope, variable, _i, _len, _ref;
    console.log("attempting to evaluate document", doc);
    scope = new Scope();
    compileList(scope, doc.node.list);
    _ref = scope.upscope;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      variable = _ref[_i];
      variable.slot = 'Environment["' + variable.name + '"]';
    }
    return console.log(scope.build());
  };

  compileList = function(scope, exprs) {
    var node, vars, _i, _len;
    vars = [];
    for (_i = 0, _len = exprs.length; _i < _len; _i++) {
      node = exprs[_i];
      if (isCr(node)) {
        continue;
      }
      vars.push(compileExpr(scope, node));
    }
    return vars;
  };

  compileExpr = function(scope, expr) {
    var args, argvar, callee, retvar;
    if (isText(expr)) {
      if (/^\d+$/.test(expr.text)) {
        return {
          name: null,
          slot: expr.text
        };
      }
      return scope.lookup(expr.text);
    } else if (isList(expr) && expr.label === null) {
      args = compileList(scope, expr.list);
      callee = args.shift();
      retvar = scope.tempvar();
      scope.push(function() {
        return "" + (slot(retvar)) + " = " + (slot(callee)) + "(" + ((slots(args)).join(', ')) + ");";
      });
      return retvar;
    } else if (isMacro(expr, "let") && expr.length === 2 && isText(expr.get(0))) {
      retvar = scope.define(expr.get(0).text);
      argvar = compileExpr(scope, expr.get(1));
      scope.push(function() {
        return "" + (slot(retvar)) + " = " + (slot(argvar)) + ";";
      });
      return retvar;
    } else if (isMacro(expr, "set") && expr.length === 2 && isText(expr.get(0))) {
      retvar = scope.lookup(expr.get(0).text);
      argvar = compileExpr(scope, expr.get(1));
      scope.push(function() {
        return "" + (slot(retvar)) + " = " + (slot(argvar)) + ";";
      });
      return retvar;
    } else {
      console.log(expr);
      throw "blah";
    }
  };

  isMacro = function(expr, name) {
    return isList(expr) && expr.label === name;
  };

  Scope = (function() {
    function Scope(parent) {
      this.parent = parent != null ? parent : null;
      this.locals = [];
      this.upscope = [];
      this.block = [];
    }

    Scope.prototype.define = function(name) {
      var local, _i, _len, _ref;
      _ref = this.locals;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        local = _ref[_i];
        if (local.name === name) {
          return local;
        }
      }
      this.locals.push(local = {
        name: name,
        slot: genSym()
      });
      return local;
    };

    Scope.prototype.lookup = function(name) {
      var local, up, _i, _len, _ref;
      _ref = this.locals;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        local = _ref[_i];
        if (local.name === name) {
          return local;
        }
      }
      if (this.parent != null) {
        return this.parent.lookup(name);
      }
      this.upscope.push(up = {
        name: name,
        slot: null
      });
      return up;
    };

    Scope.prototype.tempvar = function() {
      var local;
      this.locals.push(local = {
        name: null,
        slot: genSym()
      });
      return local;
    };

    Scope.prototype.push = function(string) {
      return this.block.push(string);
    };

    Scope.prototype.build = function() {
      var block, out, _i, _len, _ref;
      out = "var " + ((slots(this.locals)).join(', ')) + ";";
      _ref = this.block;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        block = _ref[_i];
        out += block();
      }
      return out;
    };

    return Scope;

  })();

  lastTmp = 1;

  genSym = function() {
    return "__t" + (lastTmp += 1);
  };

  slot = function(variable) {
    return variable.slot;
  };

  slots = function(variables) {
    var variable, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = variables.length; _i < _len; _i++) {
      variable = variables[_i];
      _results.push(variable.slot);
    }
    return _results;
  };

}).call(this);
