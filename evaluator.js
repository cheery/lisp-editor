// Generated by CoffeeScript 1.6.3
(function() {
  var Scope, compileBlock, compileCond, compileExpr, compileList, genSym, isMacro, lastTmp, slot, slots,
    __slice = [].slice;

  window.Environment = {
    "print": function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return console.log.apply(console, args);
    },
    "+": function(a, b) {
      return a + b;
    },
    "-": function(a, b) {
      return a - b;
    },
    "*": function(a, b) {
      return a * b;
    },
    "%": function(a, b) {
      return a % b;
    },
    "/": function(a, b) {
      return a / b;
    },
    "<": function(a, b) {
      return a < b;
    },
    "<=": function(a, b) {
      return a <= b;
    },
    ">=": function(a, b) {
      return a >= b;
    },
    ">": function(a, b) {
      return a > b;
    },
    "=": function(a, b) {
      return a === b;
    },
    "!=": function(a, b) {
      return a !== b;
    }
  };

  window.evaluateDocument = function(doc) {
    var func, scope, text, variable, _i, _len, _ref;
    scope = new Scope();
    compileList(scope, doc.node.list);
    _ref = scope.upscope;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      variable = _ref[_i];
      variable.slot = 'Environment["' + variable.name + '"]';
    }
    text = scope.build();
    func = new Function(text);
    return func();
  };

  compileList = function(scope, exprs) {
    var node, vars, _i, _len;
    vars = [];
    for (_i = 0, _len = exprs.length; _i < _len; _i++) {
      node = exprs[_i];
      if (isCr(node)) {
        continue;
      }
      vars.push(compileExpr(scope, node));
    }
    return vars;
  };

  compileBlock = function(scope, exprs) {
    var node, retvar, _i, _len;
    retvar = {
      name: null,
      slot: "null"
    };
    for (_i = 0, _len = exprs.length; _i < _len; _i++) {
      node = exprs[_i];
      if (isCr(node)) {
        continue;
      }
      retvar = compileExpr(scope, node);
    }
    return retvar;
  };

  compileExpr = function(scope, expr) {
    var arg, args, argvar, callee, cond, retfunc, retval, retvar, _i, _len, _ref;
    if (isText(expr)) {
      if (expr.text === 'true') {
        return {
          name: null,
          slot: "true"
        };
      }
      if (expr.text === 'false') {
        return {
          name: null,
          slot: "false"
        };
      }
      if (expr.text === 'null') {
        return {
          name: null,
          slot: "null"
        };
      }
      if (/^\d+$/.test(expr.text)) {
        return {
          name: null,
          slot: expr.text
        };
      }
      return scope.lookup(expr.text);
    } else if (isList(expr) && expr.label === null) {
      args = compileList(scope, expr.list);
      callee = args.shift();
      retvar = scope.tempvar();
      scope.push(function() {
        return "" + (slot(retvar)) + " = " + (slot(callee)) + "(" + ((slots(args)).join(', ')) + ");";
      });
      return retvar;
    } else if (isMacro(expr, "let") && expr.length === 2 && isText(expr.get(0))) {
      argvar = compileExpr(scope, expr.get(1));
      retvar = scope.define(expr.get(0).text);
      scope.push(function() {
        return "" + (slot(retvar)) + " = " + (slot(argvar)) + ";";
      });
      return retvar;
    } else if (isMacro(expr, "set") && expr.length === 2 && isText(expr.get(0))) {
      argvar = compileExpr(scope, expr.get(1));
      retvar = scope.lookup(expr.get(0).text);
      scope.push(function() {
        return "" + (slot(retvar)) + " = " + (slot(argvar)) + ";";
      });
      return retvar;
    } else if (isMacro(expr, "return")) {
      retvar = compileBlock(scope, expr.list);
      scope.push(function() {
        return "return " + (slot(retvar)) + ";";
      });
      return retvar;
    } else if (isMacro(expr, "func") && isList(expr.get(0))) {
      retfunc = scope.tempvar();
      scope = new Scope(scope);
      _ref = expr.get(0).list;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        arg = _ref[_i];
        scope.args.push({
          name: arg.text,
          slot: genSym()
        });
      }
      retval = compileBlock(scope, expr.list.slice(1));
      scope.push(function() {
        return "return " + (slot(retval)) + ";";
      });
      scope.close();
      scope.parent.push(function() {
        return ("" + (slot(retfunc)) + " = function(" + ((slots(scope.args)).join(",")) + "){") + scope.build() + "};";
      });
      return retfunc;
    } else if (isMacro(expr, "cond")) {
      return compileCond(scope, expr.list);
    } else if (isMacro(expr, "while")) {
      scope.push(function() {
        return "while(true){";
      });
      cond = compileExpr(scope, expr.get(0));
      scope.push(function() {
        return "if(!(" + (slot(cond)) + ")) break;";
      });
      compileBlock(scope, expr.list.slice(1));
      scope.push(function() {
        return "}";
      });
      return {
        name: null,
        slot: "null"
      };
    } else {
      console.log(expr);
      throw "blah";
    }
  };

  compileCond = function(scope, list) {
    var cond, elsevar, expr, retvar;
    if (list.length === 0) {
      return {
        name: null,
        slot: "null"
      };
    }
    expr = list[0];
    if (isCr(expr)) {
      return compileCond(scope, list.slice(1));
    }
    if (isMacro(expr, "else")) {
      return compileBlock(scope, expr.list);
    }
    cond = compileExpr(scope, expr.get(0));
    scope.push(function() {
      return "if(" + (slot(cond)) + ") {";
    });
    retvar = compileBlock(scope, expr.list.slice(1));
    scope.push(function() {
      return "} else {";
    });
    elsevar = compileCond(scope, list.slice(1));
    scope.push(function() {
      return "" + (slot(retvar)) + " = " + (slot(elsevar)) + ";";
    });
    scope.push(function() {
      return "}";
    });
    return retvar;
  };

  isMacro = function(expr, name) {
    return isList(expr) && expr.label === name;
  };

  Scope = (function() {
    function Scope(parent) {
      this.parent = parent != null ? parent : null;
      this.args = [];
      this.locals = [];
      this.upscope = [];
      this.block = [];
      this.closures = [];
      if (this.parent != null) {
        this.parent.closures.push(this);
      }
    }

    Scope.prototype.close = function() {
      var closure, local, up, _i, _len, _ref, _results;
      _ref = this.closures;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        closure = _ref[_i];
        _results.push((function() {
          var _j, _len1, _ref1, _results1;
          _ref1 = closure.upscope;
          _results1 = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            up = _ref1[_j];
            local = this.find(up.name);
            if (local != null) {
              _results1.push(up.slot = local.slot);
            } else {
              _results1.push(this.upscope.push(up));
            }
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Scope.prototype.find = function(name) {
      var local, _i, _j, _len, _len1, _ref, _ref1;
      _ref = this.args;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        local = _ref[_i];
        if (local.name === name) {
          return local;
        }
      }
      _ref1 = this.locals;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        local = _ref1[_j];
        if (local.name === name) {
          return local;
        }
      }
      return null;
    };

    Scope.prototype.define = function(name) {
      var local;
      local = this.find(name);
      if (local != null) {
        return local;
      }
      this.locals.push(local = {
        name: name,
        slot: genSym()
      });
      return local;
    };

    Scope.prototype.lookup = function(name) {
      var local, up;
      local = this.find(name);
      if (local != null) {
        return local;
      }
      if (this.parent != null) {
        return this.parent.lookup(name);
      }
      this.upscope.push(up = {
        name: name,
        slot: null
      });
      return up;
    };

    Scope.prototype.tempvar = function() {
      var local;
      this.locals.push(local = {
        name: null,
        slot: genSym()
      });
      return local;
    };

    Scope.prototype.push = function(string) {
      return this.block.push(string);
    };

    Scope.prototype.build = function() {
      var block, out, _i, _len, _ref;
      out = "";
      if (this.locals.length > 0) {
        out += "var " + ((slots(this.locals)).join(', ')) + ";";
      }
      _ref = this.block;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        block = _ref[_i];
        out += block();
      }
      return out;
    };

    return Scope;

  })();

  lastTmp = 1;

  genSym = function() {
    return "v" + (lastTmp += 1);
  };

  slot = function(variable) {
    return variable.slot;
  };

  slots = function(variables) {
    var variable, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = variables.length; _i < _len; _i++) {
      variable = variables[_i];
      _results.push(variable.slot);
    }
    return _results;
  };

}).call(this);
